{"ast":null,"code":"var _jsxFileName = \"/home/oem/Todo1/client/src/components/forms/UserFormEdit/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateUserRequset } from \"../../../actions/usersCreators\";\nimport AutoAwesomeMotionIcon from \"@mui/icons-material/AutoAwesomeMotion\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport * as Yup from \"yup\";\nimport cx from \"classnames\";\nimport styles from \"./UserFormEdit.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UserFormEditWrapper = () => {\n  ret;\n};\n\n_c = UserFormEditWrapper;\n\nconst UserFormEdit = _ref => {\n  _s();\n\n  let {\n    setModalActive,\n    user,\n    modalActive\n  } = _ref;\n  const {\n    isFetching\n  } = useSelector(_ref2 => {\n    let {\n      users\n    } = _ref2;\n    return users;\n  });\n  console.log(isFetching);\n  const dispatch = useDispatch();\n  const filePicker = useRef(null);\n\n  const handlerPick = () => filePicker.current.click();\n\n  const onSubmit = (values, formikBag) => {\n    dispatch(updateUserRequset({\n      values: values,\n      userId: user.id\n    }));\n    setModalActive(false);\n    formikBag.resetForm();\n  };\n\n  const validationShemas = Yup.object({\n    login: Yup.string().required(\"Must be required\"),\n    password: Yup.string().required(\"Must be required\"),\n    name: Yup.string().required(\"Must be required\")\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.modal_container,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.modal_wrapper,\n        children: modalActive && /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            login: user.login || \"\",\n            name: user.name || \"\",\n            password: \"\",\n            avatar: \"\"\n          },\n          validationSchema: validationShemas,\n          onSubmit: onSubmit,\n          children: formikProps => /*#__PURE__*/_jsxDEV(Form, {\n            className: styles.form,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.close_modal,\n              children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n                className: styles.modal_close_item,\n                onClick: () => setModalActive(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: styles.login,\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                name: \"name\",\n                children: _ref3 => {\n                  let {\n                    field,\n                    form,\n                    meta\n                  } = _ref3;\n                  const inputClasses = cx(styles.registr_input, {\n                    [styles.invalid]: meta.error && meta.touched\n                  });\n                  return /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n                    className: inputClasses,\n                    placeholder: \"name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 70,\n                    columnNumber: 27\n                  }, this);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"name\",\n                component: \"div\",\n                className: styles.error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: styles.login,\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                name: \"login\",\n                children: _ref4 => {\n                  let {\n                    field,\n                    form,\n                    meta\n                  } = _ref4;\n                  const inputClasses = cx(styles.registr_input, {\n                    [styles.invalid]: meta.error && meta.touched\n                  });\n                  return /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n                    className: inputClasses,\n                    placeholder: \"login\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 27\n                  }, this);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"login\",\n                component: \"div\",\n                className: styles.error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: styles.password,\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                name: \"password\",\n                children: _ref5 => {\n                  let {\n                    field,\n                    form,\n                    meta\n                  } = _ref5;\n                  const inputClasses = cx(styles.registr_input, {\n                    [styles.invalid]: meta.error && meta.touched\n                  });\n                  return /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n                    className: inputClasses,\n                    placeholder: \"password\",\n                    type: \"password\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 112,\n                    columnNumber: 27\n                  }, this);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"password\",\n                component: \"div\",\n                className: styles.error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handlerPick,\n              className: styles.file_picker,\n              type: \"button\",\n              children: /*#__PURE__*/_jsxDEV(AutoAwesomeMotionIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              name: \"avatar\",\n              ref: filePicker,\n              className: styles.hidden,\n              onChange: e => formikProps.setFieldValue(\"avatar\", e.target.files[0])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"submit\",\n              className: styles.submit,\n              value: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(UserFormEdit, \"Va1rJxd99GOZ2NYqhfAC7Hqfgvc=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c2 = UserFormEdit;\nexport default UserFormEdit;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UserFormEditWrapper\");\n$RefreshReg$(_c2, \"UserFormEdit\");","map":{"version":3,"names":["React","useRef","Formik","Form","Field","ErrorMessage","useDispatch","useSelector","updateUserRequset","AutoAwesomeMotionIcon","CloseIcon","Yup","cx","styles","UserFormEditWrapper","ret","UserFormEdit","setModalActive","user","modalActive","isFetching","users","console","log","dispatch","filePicker","handlerPick","current","click","onSubmit","values","formikBag","userId","id","resetForm","validationShemas","object","login","string","required","password","name","modal_container","modal_wrapper","avatar","formikProps","form","close_modal","modal_close_item","field","meta","inputClasses","registr_input","invalid","error","touched","file_picker","hidden","e","setFieldValue","target","files","submit"],"sources":["/home/oem/Todo1/client/src/components/forms/UserFormEdit/index.js"],"sourcesContent":["import React, { useRef } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateUserRequset } from \"../../../actions/usersCreators\";\nimport AutoAwesomeMotionIcon from \"@mui/icons-material/AutoAwesomeMotion\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport * as Yup from \"yup\";\nimport cx from \"classnames\";\nimport styles from \"./UserFormEdit.module.scss\";\n\n\nconst UserFormEditWrapper=()=>{\n\n  ret\n}\n\n\n\nconst UserFormEdit = ({ setModalActive, user, modalActive }) => {\n  const { isFetching } = useSelector(({ users }) => users);\n  console.log(isFetching);\n  const dispatch = useDispatch();\n  const filePicker = useRef(null);\n  const handlerPick = () => filePicker.current.click();\n\n  const onSubmit = (values, formikBag) => {\n    dispatch(updateUserRequset({ values: values, userId: user.id }));\n    setModalActive(false);\n    formikBag.resetForm();\n  };\n\n  const validationShemas = Yup.object({\n    login: Yup.string().required(\"Must be required\"),\n    password: Yup.string().required(\"Must be required\"),\n    name: Yup.string().required(\"Must be required\"),\n  });\n\n  return (\n    <>\n      <div className={styles.modal_container}>\n        <div className={styles.modal_wrapper}>\n          {modalActive && (\n            <Formik\n              initialValues={{\n                login: user.login || \"\",\n                name: user.name || \"\",\n                password: \"\",\n                avatar: \"\",\n              }}\n              validationSchema={validationShemas}\n              onSubmit={onSubmit}\n            >\n              {(formikProps) => (\n                <Form className={styles.form}>\n                  <div className={styles.close_modal}>\n                    {\n                      <CloseIcon\n                        className={styles.modal_close_item}\n                        onClick={() => setModalActive(false)}\n                      />\n                    }\n                  </div>\n                  <label className={styles.login}>\n                    <Field name=\"name\">\n                      {({ field, form, meta }) => {\n                        const inputClasses = cx(styles.registr_input, {\n                          [styles.invalid]: meta.error && meta.touched,\n                        });\n                        return (\n                          <input\n                            {...field}\n                            className={inputClasses}\n                            placeholder=\"name\"\n                          />\n                        );\n                      }}\n                    </Field>\n                    <ErrorMessage\n                      name=\"name\"\n                      component=\"div\"\n                      className={styles.error}\n                    />\n                  </label>\n                  <label className={styles.login}>\n                    <Field name=\"login\">\n                      {({ field, form, meta }) => {\n                        const inputClasses = cx(styles.registr_input, {\n                          [styles.invalid]: meta.error && meta.touched,\n                        });\n                        return (\n                          <input\n                            {...field}\n                            className={inputClasses}\n                            placeholder=\"login\"\n                          />\n                        );\n                      }}\n                    </Field>\n                    <ErrorMessage\n                      name=\"login\"\n                      component=\"div\"\n                      className={styles.error}\n                    />\n                  </label>\n                  <label className={styles.password}>\n                    <Field name=\"password\">\n                      {({ field, form, meta }) => {\n                        const inputClasses = cx(styles.registr_input, {\n                          [styles.invalid]: meta.error && meta.touched,\n                        });\n                        return (\n                          <input\n                            {...field}\n                            className={inputClasses}\n                            placeholder=\"password\"\n                            type=\"password\"\n                          />\n                        );\n                      }}\n                    </Field>\n                    <ErrorMessage\n                      name=\"password\"\n                      component=\"div\"\n                      className={styles.error}\n                    />\n                  </label>\n\n                  <button\n                    onClick={handlerPick}\n                    className={styles.file_picker}\n                    type=\"button\"\n                  >\n                    <AutoAwesomeMotionIcon />\n                  </button>\n                  <input\n                    type=\"file\"\n                    name=\"avatar\"\n                    ref={filePicker}\n                    className={styles.hidden}\n                    onChange={(e) =>\n                      formikProps.setFieldValue(\"avatar\", e.target.files[0])\n                    }\n                  />\n                  <input type=\"submit\" className={styles.submit} value=\"Save\" />\n                </Form>\n              )}\n            </Formik>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default UserFormEdit;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}