{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createUserRequest } from \"../../actions/usersCreators\";\nimport * as Yup from \"yup\";\nimport cx from \"classnames\";\nimport styles from \"./UserForm.module.scss\";\nimport gomer from \"./homer_registr.jpg\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserForm = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    isFetching\n  } = useSelector(_ref => {\n    let {\n      users\n    } = _ref;\n    return users;\n  });\n  const filePicker = useRef(null);\n\n  const onSubmit = (values, formikBag) => {\n    dispatch(createUserRequest(values));\n    formikBag.resetForm();\n  };\n\n  const handlerPick = () => filePicker.current.click();\n\n  const validationShemas = Yup.object({\n    login: Yup.string().required(\"Must be required\"),\n    password: Yup.string().required(\"Must be required\"),\n    name: Yup.string().required(\"Must be required\")\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(UserForm, \"uhA5qNl9x8NW1gsgPleC+tRSfqo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = UserForm;\nexport default UserForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserForm\");","map":{"version":3,"names":["React","useRef","Formik","Form","Field","ErrorMessage","useDispatch","useSelector","createUserRequest","Yup","cx","styles","gomer","UserForm","dispatch","isFetching","users","filePicker","onSubmit","values","formikBag","resetForm","handlerPick","current","click","validationShemas","object","login","string","required","password","name"],"sources":["/home/oem/Todo1/client/src/components/UserForm/index.js"],"sourcesContent":["import React, { useRef } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createUserRequest } from \"../../actions/usersCreators\";\nimport * as Yup from \"yup\";\nimport cx from \"classnames\";\nimport styles from \"./UserForm.module.scss\";\nimport gomer from \"./homer_registr.jpg\";\n\nconst UserForm = () => {\n  const dispatch = useDispatch();\n\n  const { isFetching } = useSelector(({ users }) => users);\n  const filePicker = useRef(null);\n\n  const onSubmit = (values, formikBag) => {\n    dispatch(createUserRequest(values));\n    formikBag.resetForm();\n  };\n\n  const handlerPick = () => filePicker.current.click();\n\n  const validationShemas = Yup.object({\n    login: Yup.string().required(\"Must be required\"),\n    password: Yup.string().required(\"Must be required\"),\n    name: Yup.string().required(\"Must be required\"),\n  });\n\n  return (\n    <>\n      {/* {!isFetching ? (\n        <Formik\n          initialValues={{\n            login: \"\",\n            name: \"\",\n            password: \"\",\n            avatar: \"\",\n          }}\n          validationSchema={validationShemas}\n          onSubmit={onSubmit}\n        >\n          {(formikProps) => (\n            <Form className={styles.form}>\n              <label className={styles.login}>\n                <Field name=\"name\">\n                  {({ field, form, meta }) => {\n                    const inputClasses = cx(styles.registr_input, {\n                      [styles.invalid]: meta.error && meta.touched,\n                    });\n                    return (\n                      <input\n                        {...field}\n                        className={inputClasses}\n                        placeholder=\"name\"\n                      />\n                    );\n                  }}\n                </Field>\n                <ErrorMessage\n                  name=\"name\"\n                  component=\"div\"\n                  className={styles.error}\n                />\n              </label>\n              <label className={styles.login}>\n                <Field name=\"login\">\n                  {({ field, form, meta }) => {\n                    const inputClasses = cx(styles.registr_input, {\n                      [styles.invalid]: meta.error && meta.touched,\n                    });\n                    return (\n                      <input\n                        {...field}\n                        className={inputClasses}\n                        placeholder=\"login\"\n                      />\n                    );\n                  }}\n                </Field>\n                <ErrorMessage\n                  name=\"login\"\n                  component=\"div\"\n                  className={styles.error}\n                />\n              </label>\n              <label className={styles.password}>\n                <Field name=\"password\">\n                  {({ field, form, meta }) => {\n                    const inputClasses = cx(styles.registr_input, {\n                      [styles.invalid]: meta.error && meta.touched,\n                    });\n                    return (\n                      <input\n                        {...field}\n                        className={inputClasses}\n                        placeholder=\"password\"\n                        type=\"password\"\n                      />\n                    );\n                  }}\n                </Field>\n                <ErrorMessage\n                  name=\"password\"\n                  component=\"div\"\n                  className={styles.error}\n                />\n              </label>\n\n              <button\n                onClick={handlerPick}\n                className={styles.file_picker}\n                type=\"button\"\n              >\n                Chooze file..\n              </button>\n              <input\n                type=\"file\"\n                name=\"avatar\"\n                ref={filePicker}\n                className={styles.hidden}\n                onChange={(e) =>\n                  formikProps.setFieldValue(\"avatar\", e.target.files[0])\n                }\n              />\n              <input type=\"submit\" className={styles.submit} value=\"Next\" />\n            </Form>\n          )}\n        </Formik>\n      ) : (\n        <div className={styles.finish_registr}>\n          <img src={gomer} alt=\"gomer\" className={styles.gomer} />\n          <div className={styles.finish_text}>\n            <h2 className={styles.heading_finish}>All good!</h2>\n            <h3>Registration successful</h3>\n          </div>\n        </div>\n      )} */}\n    </>\n  );\n};\n\nexport default UserForm;\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EACrB,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;EAEA,MAAM;IAAES;EAAF,IAAiBR,WAAW,CAAC;IAAA,IAAC;MAAES;IAAF,CAAD;IAAA,OAAeA,KAAf;EAAA,CAAD,CAAlC;EACA,MAAMC,UAAU,GAAGhB,MAAM,CAAC,IAAD,CAAzB;;EAEA,MAAMiB,QAAQ,GAAG,CAACC,MAAD,EAASC,SAAT,KAAuB;IACtCN,QAAQ,CAACN,iBAAiB,CAACW,MAAD,CAAlB,CAAR;IACAC,SAAS,CAACC,SAAV;EACD,CAHD;;EAKA,MAAMC,WAAW,GAAG,MAAML,UAAU,CAACM,OAAX,CAAmBC,KAAnB,EAA1B;;EAEA,MAAMC,gBAAgB,GAAGhB,GAAG,CAACiB,MAAJ,CAAW;IAClCC,KAAK,EAAElB,GAAG,CAACmB,MAAJ,GAAaC,QAAb,CAAsB,kBAAtB,CAD2B;IAElCC,QAAQ,EAAErB,GAAG,CAACmB,MAAJ,GAAaC,QAAb,CAAsB,kBAAtB,CAFwB;IAGlCE,IAAI,EAAEtB,GAAG,CAACmB,MAAJ,GAAaC,QAAb,CAAsB,kBAAtB;EAH4B,CAAX,CAAzB;EAMA,oBACE,qCADF;AA+GD,CAlID;;GAAMhB,Q;UACaP,W,EAEMC,W;;;KAHnBM,Q;AAoIN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}