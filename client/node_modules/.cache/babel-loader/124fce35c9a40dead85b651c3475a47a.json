{"ast":null,"code":"import { put } from \"redux-saga/effects\";\nimport { createUserSuccess, createUserError, getUsersSuccess, getUsersError, getUserByIdSuccess, getUserByIdError, deleteUserByIdError, deleteUserByIdSuccess, updateUserError, updateUserSuccess } from \"../actions/usersCreators\";\nimport { createUser, getAllUsers, getUserById, deleteUser, updateUser } from \"../api\";\nexport function* createUserSaga(action) {\n  try {\n    const {\n      data: {\n        data: user\n      }\n    } = yield createUser(action.payload.values);\n    yield put(createUserSuccess(user));\n  } catch (error) {\n    yield put(createUserError(error));\n  }\n}\nexport function* getAllUsersSaga(action) {\n  try {\n    const {\n      data: {\n        data: {\n          users,\n          totalUsers\n        }\n      }\n    } = yield getAllUsers(action.payload);\n    yield put(getUsersSuccess({\n      users,\n      totalUsers\n    }));\n  } catch (error) {\n    yield put(getUsersError(error));\n  }\n}\nexport function* getUserByIdSaga(action) {\n  try {\n    const {\n      data: {\n        data: user\n      }\n    } = yield getUserById(action.payload);\n    yield put(getUserByIdSuccess({\n      user\n    }));\n  } catch (error) {\n    yield put(getUserByIdError({\n      error\n    }));\n  }\n}\nexport function* deleteUserSaga(action) {\n  try {\n    const {\n      data: {\n        data: user\n      }\n    } = yield deleteUser(action.payload.id);\n    yield put(deleteUserByIdSuccess({\n      user\n    }));\n  } catch (error) {\n    yield put(deleteUserByIdError({\n      error\n    }));\n  }\n}\nexport function* updateUserSaga(action) {\n  try {\n    const {\n      data: {\n        data: user\n      }\n    } = yield updateUser(action.payload.userId);\n    console.log(user);\n    yield put(updateUserSuccess({\n      user\n    }));\n  } catch (error) {\n    yield put(updateUserError({\n      error\n    }));\n  }\n}","map":{"version":3,"names":["put","createUserSuccess","createUserError","getUsersSuccess","getUsersError","getUserByIdSuccess","getUserByIdError","deleteUserByIdError","deleteUserByIdSuccess","updateUserError","updateUserSuccess","createUser","getAllUsers","getUserById","deleteUser","updateUser","createUserSaga","action","data","user","payload","values","error","getAllUsersSaga","users","totalUsers","getUserByIdSaga","deleteUserSaga","id","updateUserSaga","userId","console","log"],"sources":["/home/oem/Todo1/client/src/sagas/usersSagas.js"],"sourcesContent":["import { put } from \"redux-saga/effects\";\nimport {\n  createUserSuccess,\n  createUserError,\n  getUsersSuccess,\n  getUsersError,\n  getUserByIdSuccess,\n  getUserByIdError,\n  deleteUserByIdError,\n  deleteUserByIdSuccess,\n  updateUserError,\n  updateUserSuccess,\n} from \"../actions/usersCreators\";\nimport {\n  createUser,\n  getAllUsers,\n  getUserById,\n  deleteUser,\n  updateUser,\n} from \"../api\";\n\nexport function* createUserSaga(action) {\n  try {\n    const {\n      data: { data: user },\n    } = yield createUser(action.payload.values);\n    yield put(createUserSuccess(user));\n  } catch (error) {\n    yield put(createUserError(error));\n  }\n}\nexport function* getAllUsersSaga(action) {\n  try {\n    const {\n      data: {\n        data: { users, totalUsers },\n      },\n    } = yield getAllUsers(action.payload);\n    yield put(getUsersSuccess({ users, totalUsers }));\n  } catch (error) {\n    yield put(getUsersError(error));\n  }\n}\nexport function* getUserByIdSaga(action) {\n  try {\n    const {\n      data: { data: user },\n    } = yield getUserById(action.payload);\n    yield put(getUserByIdSuccess({ user }));\n  } catch (error) {\n    yield put(getUserByIdError({ error }));\n  }\n}\n\nexport function* deleteUserSaga(action) {\n  try {\n    const {\n      data: { data: user },\n    } = yield deleteUser(action.payload.id);\n    yield put(deleteUserByIdSuccess({ user }));\n  } catch (error) {\n    yield put(deleteUserByIdError({ error }));\n  }\n}\nexport function* updateUserSaga(action) {\n  try {\n    const {\n      data: { data: user },\n    } = yield updateUser(action.payload.userId);\n    console.log(user);\n    yield put(updateUserSuccess({ user }));\n  } catch (error) {\n    yield put(updateUserError({ error }));\n  }\n}\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,oBAApB;AACA,SACEC,iBADF,EAEEC,eAFF,EAGEC,eAHF,EAIEC,aAJF,EAKEC,kBALF,EAMEC,gBANF,EAOEC,mBAPF,EAQEC,qBARF,EASEC,eATF,EAUEC,iBAVF,QAWO,0BAXP;AAYA,SACEC,UADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,UALF,QAMO,QANP;AAQA,OAAO,UAAUC,cAAV,CAAyBC,MAAzB,EAAiC;EACtC,IAAI;IACF,MAAM;MACJC,IAAI,EAAE;QAAEA,IAAI,EAAEC;MAAR;IADF,IAEF,MAAMR,UAAU,CAACM,MAAM,CAACG,OAAP,CAAeC,MAAhB,CAFpB;IAGA,MAAMrB,GAAG,CAACC,iBAAiB,CAACkB,IAAD,CAAlB,CAAT;EACD,CALD,CAKE,OAAOG,KAAP,EAAc;IACd,MAAMtB,GAAG,CAACE,eAAe,CAACoB,KAAD,CAAhB,CAAT;EACD;AACF;AACD,OAAO,UAAUC,eAAV,CAA0BN,MAA1B,EAAkC;EACvC,IAAI;IACF,MAAM;MACJC,IAAI,EAAE;QACJA,IAAI,EAAE;UAAEM,KAAF;UAASC;QAAT;MADF;IADF,IAIF,MAAMb,WAAW,CAACK,MAAM,CAACG,OAAR,CAJrB;IAKA,MAAMpB,GAAG,CAACG,eAAe,CAAC;MAAEqB,KAAF;MAASC;IAAT,CAAD,CAAhB,CAAT;EACD,CAPD,CAOE,OAAOH,KAAP,EAAc;IACd,MAAMtB,GAAG,CAACI,aAAa,CAACkB,KAAD,CAAd,CAAT;EACD;AACF;AACD,OAAO,UAAUI,eAAV,CAA0BT,MAA1B,EAAkC;EACvC,IAAI;IACF,MAAM;MACJC,IAAI,EAAE;QAAEA,IAAI,EAAEC;MAAR;IADF,IAEF,MAAMN,WAAW,CAACI,MAAM,CAACG,OAAR,CAFrB;IAGA,MAAMpB,GAAG,CAACK,kBAAkB,CAAC;MAAEc;IAAF,CAAD,CAAnB,CAAT;EACD,CALD,CAKE,OAAOG,KAAP,EAAc;IACd,MAAMtB,GAAG,CAACM,gBAAgB,CAAC;MAAEgB;IAAF,CAAD,CAAjB,CAAT;EACD;AACF;AAED,OAAO,UAAUK,cAAV,CAAyBV,MAAzB,EAAiC;EACtC,IAAI;IACF,MAAM;MACJC,IAAI,EAAE;QAAEA,IAAI,EAAEC;MAAR;IADF,IAEF,MAAML,UAAU,CAACG,MAAM,CAACG,OAAP,CAAeQ,EAAhB,CAFpB;IAGA,MAAM5B,GAAG,CAACQ,qBAAqB,CAAC;MAAEW;IAAF,CAAD,CAAtB,CAAT;EACD,CALD,CAKE,OAAOG,KAAP,EAAc;IACd,MAAMtB,GAAG,CAACO,mBAAmB,CAAC;MAAEe;IAAF,CAAD,CAApB,CAAT;EACD;AACF;AACD,OAAO,UAAUO,cAAV,CAAyBZ,MAAzB,EAAiC;EACtC,IAAI;IACF,MAAM;MACJC,IAAI,EAAE;QAAEA,IAAI,EAAEC;MAAR;IADF,IAEF,MAAMJ,UAAU,CAACE,MAAM,CAACG,OAAP,CAAeU,MAAhB,CAFpB;IAGAC,OAAO,CAACC,GAAR,CAAYb,IAAZ;IACA,MAAMnB,GAAG,CAACU,iBAAiB,CAAC;MAAES;IAAF,CAAD,CAAlB,CAAT;EACD,CAND,CAME,OAAOG,KAAP,EAAc;IACd,MAAMtB,GAAG,CAACS,eAAe,CAAC;MAAEa;IAAF,CAAD,CAAhB,CAAT;EACD;AACF"},"metadata":{},"sourceType":"module"}